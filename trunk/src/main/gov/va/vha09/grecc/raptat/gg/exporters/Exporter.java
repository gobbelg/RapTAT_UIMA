package src.main.gov.va.vha09.grecc.raptat.gg.exporters;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import org.apache.commons.io.FileUtils;
import src.main.gov.va.vha09.grecc.raptat.dw.core.JavaCore;
import src.main.gov.va.vha09.grecc.raptat.gg.core.Constants.AnnotationApp;
import src.main.gov.va.vha09.grecc.raptat.gg.core.annotation.AnnotationImportExportConfiguration;
import src.main.gov.va.vha09.grecc.raptat.gg.core.annotation.AnnotationImportExportConfiguration.From;
import src.main.gov.va.vha09.grecc.raptat.gg.core.annotation.IAnnotatorParameterObject;
import src.main.gov.va.vha09.grecc.raptat.gg.core.dialogs.ButtonQueryDialog;
import src.main.gov.va.vha09.grecc.raptat.gg.datastructures.annotationcomponents.AnnotationGroup;
import src.main.gov.va.vha09.grecc.raptat.ss.sql.drivers.ISQLDriver;
import src.main.gov.va.vha09.grecc.raptat.ss.sql.engine.XLSXReader;

public abstract class Exporter {

  /**
   *
   * @param exportAnnonationGroupParameter
   * @throws ExporterException
   */
  public abstract void exportAnnotationGroup(
      ExportAnnonationGroupParameter exportAnnonationGroupParameter) throws ExporterException;

  /**
   *
   * @param exportAnnonationGroupParameter
   */
  public abstract void exportRaptatAnnotationGroup(
      ExportAnnonationGroupParameter exportAnnonationGroupParameter);

  /**
   *
   * @param exportAnnonationGroupParameter
   * @throws ExporterException
   */
  public abstract void exportReferenceAnnotationGroup(
      ExportAnnonationGroupParameter exportAnnonationGroupParameter) throws ExporterException;

  public abstract void setResultFolder(File resultFolder);

  /**
   * Write EHost compliant XML knowtator file using the Annotated Phrase Data
   *
   * @author Glenn Gobbel - May 29, 2013
   *
   * @param inputGroup annotated phrase data
   * @param annotatedFile
   * @param targetFolderPath
   */
  abstract void writeAnnotations(AnnotationGroup inputGroup, File annotatedFile,
      String targetFolderPath, boolean useReferenceAnnotations);

  /**
   *
   * @return
   */
  public static AnnotationApp getExporter() {
    String queryString = "Application for viewing annotations?";
    String[] buttonNames = new String[AnnotationApp.values().length];
    int i = 0;
    for (AnnotationApp app : AnnotationApp.values()) {
      buttonNames[i++] = app.getCommonName();
    }
    ButtonQueryDialog bqd = new ButtonQueryDialog(buttonNames, queryString);
    String annotationSource = bqd.showQuery();
    AnnotationApp annotationApp = AnnotationApp.EHOST;
    for (AnnotationApp app : AnnotationApp.values()) {
      if (annotationSource.toLowerCase().equals(app.toString().toLowerCase())) {
        annotationApp = app;
        break;
      }
    }
    return annotationApp;
  }

  /**
   * NOTE: Here it is assumed that if the annotated data is not written to the database instead is
   * written to XML file ,then the data is always read from the file system.
   *
   * @param parameters
   * @param documentUniqueId
   * @param sqlDriver
   * @return
   */
  public static Exporter init(IAnnotatorParameterObject parameters, String documentUniqueId,
      ISQLDriver sqlDriver) {
    Exporter exporter = null;

    /*
     * referenceAnnotations are generally used when we read from an XML file to get annotations.
     * Otherwise, we use raptatAnnotations from an AnnotationGroup, which are the ones generated by
     * Raptat
     */
    boolean useReferenceAnnotations = false;

    if (AnnotationImportExportConfiguration.useSqlExporter()) {
      String schemaFilepath = JavaCore.coalesce(parameters.get_schema_file_path(),
          AnnotationImportExportConfiguration.getSchemaFilePath());
      if (AnnotationImportExportConfiguration.read_from() == From.File) {
        HashMap<String, String> fileRefMap =
            XLSXReader.getFileReferenceNoMap(parameters.getFileMapPath());
        useReferenceAnnotations = true;
        exporter =
            new SQLExporter(parameters.getAnnotationApp(), fileRefMap.get(documentUniqueId),
                parameters.getSchemaName(), schemaFilepath, sqlDriver, useReferenceAnnotations);
      } else {
        exporter = new SQLExporter(parameters.getAnnotationApp(), documentUniqueId,
            parameters.getSchemaName(), schemaFilepath, sqlDriver, useReferenceAnnotations);
      }
    } else {
      File exportDirectory = getNextExportDirectory(parameters.getExportDirectoryPath(),
          new File(parameters.getTextDirectoryPath().get()));
      exporter = new XMLExporterRevised(parameters.getAnnotationApp(), exportDirectory, true);
    }

    return exporter;
  }

  /**
   *
   * @param exportDirectoryPath
   * @param textDirectory
   * @return
   */
  private static File getNextExportDirectory(String exportDirectoryPath, File textDirectory) {
    String exportDirectoryName =
        exportDirectoryPath + File.separator + textDirectory.getName() + "_XMLOutput";
    File exportDirectory = new File(exportDirectoryName);
    try {
      FileUtils.forceMkdir(exportDirectory);
    } catch (IOException e) {
      System.err
          .println("Unable to make directory for writing results - " + e.getLocalizedMessage());
      e.printStackTrace();
      System.exit(-1);
    }

    return exportDirectory;
  }



}

/*
 * @Deprecated abstract public void exportReferenceAnnotationGroup(AnnotationGroup inputGroup,
 * boolean correctOffsets, boolean insertPhraseStrings, String sourceTextFilesFolderPath);
 */

/*
 * @Deprecated abstract void exportAnnotationGroup(AnnotationGroup inputGroup, boolean
 * correctOffsets, boolean insertPhraseStrings, boolean useReferenceAnnotations, String
 * sourceXMLFilesFolderPath);
 */

// abstract void exportAnnotationGroup (ExportAnnonationGroupParameter
// exportAnnonationGroupParameter, boolean isReference);

/*
 * @Deprecated abstract void exportRaptatAnnotationGroup(AnnotationGroup inputGroup, boolean
 * correctOffsets, boolean insertPhraseStrings, String sourceTextFilesFolderPath);
 */
